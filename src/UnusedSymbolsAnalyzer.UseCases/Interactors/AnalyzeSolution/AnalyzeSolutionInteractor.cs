using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.FindSymbols;

namespace UnusedSymbolsAnalyzer.UseCases.Interactors.AnalyzeSolution
{
    public class AnalyzeSolutionInteractor
    {
        private static readonly HashSet<string> SkippedNamespaces = new HashSet<string>()
        {
            "System.Runtime.CompilerServices"
        };

        private static readonly HashSet<string> SkippedAttributes = new HashSet<string>()
        {
            "System.Runtime.CompilerServices.CompilerGeneratedAttribute",
            "Microsoft.VisualStudio.TestPlatform.TestSDKAutoGeneratedCode",
            "NUnit.Framework.TestFixtureAttribute"
        };

        public Task<AnalyzeSolutionResult> AnalyzeSolution(
            AnalyzeSolutionArguments arguments,
            CancellationToken cancellationToken)
        {
            this.AssertArguments(arguments);

            return this.AnalyzeSolutionImpl(arguments, cancellationToken);
        }

        private static IEnumerable<INamedTypeSymbol> GetPublicTypes(IAssemblySymbol assembly)
        {
            var visitor = new AnalyzeSolutionSymbolVisitor(
                SkippedNamespaces,
                SkippedAttributes);
            visitor.Visit(assembly.GlobalNamespace);
            return visitor.GetResult().PotentialSymbols;
        }

        private void AssertArguments(AnalyzeSolutionArguments arguments)
        {
            if (arguments == null)
            {
                throw new ArgumentNullException(nameof(arguments));
            }

            if (arguments.Solution == null)
            {
                throw new ArgumentException($"{nameof(arguments.Solution)} of {nameof(arguments)} was null.", nameof(arguments));
            }
        }

        private async Task<AnalyzeSolutionResult> AnalyzeSolutionImpl(
            AnalyzeSolutionArguments arguments,
            CancellationToken cancellationToken)
        {
            var solution = arguments.Solution;
            var allPublicTypes = new List<INamedTypeSymbol>();

            var compilationTasks = solution.Projects.Select(project => project.GetCompilationAsync(cancellationToken));

            var compilations = await Task.WhenAll(compilationTasks);

            foreach (var compilation in compilations)
            {
                allPublicTypes.AddRange(GetPublicTypes(compilation.Assembly));
            }

            var unusedPublicTypes = new List<INamedTypeSymbol>();
            foreach (var type in allPublicTypes)
            {
                var references = await SymbolFinder.FindReferencesAsync(type, solution, cancellationToken);
                var locations = references.SelectMany(reference => reference.Locations).ToList();
                if (!locations.Any())
                {
                    unusedPublicTypes.Add(type);
                }
            }

            return new AnalyzeSolutionResult
            {
                UnusedTypes = unusedPublicTypes
            };
        }
    }
}
