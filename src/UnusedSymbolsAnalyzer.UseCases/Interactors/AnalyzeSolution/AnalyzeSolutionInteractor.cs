using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.FindSymbols;

namespace UnusedSymbolsAnalyzer.UseCases.Interactors.AnalyzeSolution
{
    public class AnalyzeSolutionInteractor
    {
        private static readonly HashSet<string> SkippedNamespaces = new HashSet<string>()
        {
            "System.Runtime.CompilerServices"
        };

        private static readonly HashSet<string> SkippedAttributes = new HashSet<string>()
        {
            "System.Runtime.CompilerServices.CompilerGeneratedAttribute",
            "Microsoft.VisualStudio.TestPlatform.TestSDKAutoGeneratedCode",
            "NUnit.Framework.TestFixtureAttribute"
        };

        public Task<AnalyzeSolutionResult> AnalyzeSolution(
            AnalyzeSolutionArguments arguments,
            CancellationToken cancellationToken)
        {
            this.AssertArguments(arguments);

            return this.AnalyzeSolutionImpl(arguments, cancellationToken);
        }

        private static AnalyzeSolutionSymbolVisitorResult GetAnalyzeSolutionSymbolVisitorResult(IAssemblySymbol assembly)
        {
            var visitor = new AnalyzeSolutionSymbolVisitor(
                SkippedNamespaces,
                SkippedAttributes);
            visitor.Visit(assembly.GlobalNamespace);
            return visitor.GetResult();
        }

        private void AssertArguments(AnalyzeSolutionArguments arguments)
        {
            if (arguments == null)
            {
                throw new ArgumentNullException(nameof(arguments));
            }

            if (arguments.Solution == null)
            {
                throw new ArgumentException($"{nameof(arguments.Solution)} of {nameof(arguments)} was null.", nameof(arguments));
            }
        }

        private async Task<AnalyzeSolutionResult> AnalyzeSolutionImpl(
            AnalyzeSolutionArguments arguments,
            CancellationToken cancellationToken)
        {
            var solution = arguments.Solution;

            var compilationTasks = solution.Projects.Select(project => project.GetCompilationAsync(cancellationToken));

            var compilations = await Task.WhenAll(compilationTasks);

            var visitorResults = compilations.Select(compilation => GetAnalyzeSolutionSymbolVisitorResult(compilation.Assembly));

            var potentialTypes = visitorResults.SelectMany(visitorResult => visitorResult.PotentialTypes).ToList();
            var potentialMethods = visitorResults.SelectMany(visitorResult => visitorResult.PotentialMethods).ToList();
            var methodReferenceDatas = await this.GetMethodReferenceDatas(solution, potentialMethods, cancellationToken);
            var methodReferenceDatasLookup = methodReferenceDatas
                .ToLookup<MethodData, INamedTypeSymbol>(
                    keySelector: methodData => methodData.MethodSymbol.ContainingType,
                    comparer: SymbolEqualityComparer.Default);

            var unusedTypes = new List<INamedTypeSymbol>();
            foreach (var type in potentialTypes)
            {
                var references = await SymbolFinder.FindReferencesAsync(type, solution, cancellationToken);
                var locations = references.SelectMany(reference => reference.Locations).ToList();
                if (!locations.Any())
                {
                    var methods = methodReferenceDatasLookup[type];
                    if (methods.Any(method => method.IsExternallyReferenced()))
                    {
                        continue;
                    }

                    unusedTypes.Add(type);
                }
            }

            var unusedMethods = methodReferenceDatas
                .Where(methodReferenceData => !methodReferenceData.IsExternallyReferenced())
                .Select(methodReferenceData => methodReferenceData.MethodSymbol)
                .ToList();

            return new AnalyzeSolutionResult
            {
                UnusedTypes = unusedTypes,
                UnusedMethods = unusedMethods
            };
        }

        private async Task<List<MethodData>> GetMethodReferenceDatas(
            Solution solution,
            IList<IMethodSymbol> methodSymbols,
            CancellationToken cancellationToken)
        {
            var methodReferenceData = new List<MethodData>();

            foreach (var methodSymbol in methodSymbols)
            {
                var documentsOfTheType = methodSymbol.ContainingType.Locations.Select(document => document.SourceTree?.FilePath);
                Console.WriteLine($"Grabbing references from: {methodSymbol}.");
                var stopWatch = new Stopwatch();
                stopWatch.Start();
                var references = await SymbolFinder.FindReferencesAsync(methodSymbol, solution, cancellationToken);
                stopWatch.Stop();
                Console.WriteLine($"Grabbing references from: {methodSymbol} took: {stopWatch.ElapsedMilliseconds}.");
                var locations = references.SelectMany(reference => reference.Locations).ToList();
                var externalLocations = locations
                    .Where(referenceLocation => !documentsOfTheType.Contains(referenceLocation.Document.FilePath))
                    .ToList();
                methodReferenceData.Add(
                    new MethodData
                    {
                        MethodSymbol = methodSymbol,
                        ExternalReferenceLocations = externalLocations
                    });
            }

            return methodReferenceData;
        }
    }
}
